body
{
	background-color: #191d21;
	font-family: 'Open Sans', sans-serif;
	font-size: 20px;
	color: #efefef;
}

a:link 
{
    color: #fff;
	text-decoration: none;
}

a:visited 
{
    color: #fff;
}

a:hover 
{
    color: #fff;
}

a:active 
{    
	color: #fff;
}

.container
{
	margin-left: auto;
	margin-right: auto;
	width: 1000px;
	text-align: center;
	padding: 0;
	margin-bottom: 25px;
}

.postcard
{
	display: inline-block;
	width: 460px;
	text-align: center;
	padding: 5px;
}

.postcard p
{
	padding: 5px;
	margin-top: 10px;
}

h1
{
	font-size: 32px;
	font-weight: 400;
	color: #39a5f1;
	margin-top: 45px;	
	margin-bottom: 30px;
	letter-spacing: 10px;
	text-transform: uppercase;
}

/* Hover effects */

/*możliwe rodzaje przejść (funkcje czasowe) - ease linear ease-in ease-out ease-in-out step-start step-end steps() cubic-bezier()
chrome przy F12 pozwala podglądnąć wybraną animację i mało tego udostępnia mini edytor jak chcielibyśmy cośpoprawić np coś zwolnić czy przyspieszyć i od razu kod do skopiowania, wszystko opiera się na krzywej beziera 
*/

.photo1
{
	width: 450px;
	/*transition - płynne przejście pomiędzy dwoma stanami w CSS (animacja)
	transition: [jaką właściwość animujemy można wpisać "all" - oczywiście w obrębie klasy] [czas przejścia] [rodzaj przejścia];
	*/
	/*wpisujemy go do selektora który nie ma hovera aby powrót do stanu pierwotnego także był zanimowany*/
	transition: all 0.2s ease-in-out;
}
.photo1:hover
{
	/*transform - zmiana stanu, wyglądu, geometrii elementu przy użyciu CSS, posiada własne funkcje transformujące np: scale, slaceX, rotate,matrix.... itp*/
	/*przedrostki w css można sprawdzić w necie, trzeba ich używać by pewne rzeczy działały w przypadku starszych przeglądarek*/
	-webkit-transform: scale(0.9);
	-ms-transform: scale(0.9);
	transform: scale(0.9);
}

.photo2
{
	width: 450px;
	/*jak wpiszesz w czas .2s przeglądarka wie że chodzi o 0.2s*/
	transition: transform .2s ease-in-out;
}
.photo2:hover
{
	/*deg - stopnie, można ujemne wiadomo*/
	/*skew - skośne przekrzywienie (x,y)*/
	-ms-transform: scale(0.95) rotate(5deg);
	-webkit-transform: scale(0.95) rotate(5deg);
	transform: scale(0.95) rotate(5deg);
}

/*efekt overlay*/
.photo3
{
	width: 450px;
}
.overlay
{
	/*pozycja relatywna pozwala użyć czterech właściwości: left,right,top,bottom, za pomocą których możemy dowolnie przesuwać element względem układu odniesienia, wartość domyślna position zawsze jest static*/
	position: relative;
	width: 450px;
	height: 278;
	
}
/*łapiemy klasę link która znajduje się wewnątrz overlay*/
.overlay .link
{
	/*używajac absolut wg płótna przeglądarki robi się wypozycjonowanie danego elementu ALE my zmienniliśmy to pozycjonująć RELATYWNIE do diva OVERLAY co widać powyżej*/
	position: absolute;
	display: block;
	width:450px;
	height: 65px;
	background-color: #111;
	/*przyklejamy ten blok do początku układu współrzędnych, a w tym wypadku do lewego górnego wierzchołka nadrzędnego diva w którym się znajduje*/
	left: 0px;
	bottom: 0px;
	opacity: 0;
	transition: opacity 0.5s ease-in-out;
}
.overlay:hover .link
{
	opacity: 0.8;
	
}

.photo4
{
	width: 450px;
}
.overlayT
{
	position: relative;
	width:450px;
	height: 278px;
}
.overlayT .link
{
	position: absolute;
	display: block;
	width:100%;
	height: 100%;
	background-color: #27a38d;
	left: 0px;
	top:0px;
	opacity: 0;
	transition: opacity 2s ease-in-out;
		
}
.overlayT:hover .link
{
	opacity:0.9;
	transition: opacity 0.5s ease-in-out;
}
.icon
{
	display: block;
	top:25%;
	position: relative;
	font-size: 72px;
}
.icon p
{
	font-size: 20px;
}


/*rozrastanie się obrazu bez powiększania pudełka w którym pierwotnie siedzi*/
.photo5
{
	width: 450px;
	height:278px;
	/*ukryj fakt przepełnienia diva, nie reaguj*/
	overflow: hidden;

}

.photo5 img
{
	transition: all .5s ease-in-out;
}

.photo5:hover img{
	-webkit-transform: scale(1.15);
	-ms-transform: scale(1.15);
	transform: scale(1.15);
}

.photo6
{
	width: 450px;
	height: 278px;
	overflow: hidden;
}
.photo6 img
{
	transition: all .7s ease-in-out;
}

.photo6:hover img{
	-webkit-transform: scale(1.3) rotate(-5deg);
	-ms-transform: scale(1.3) rotate(-5deg);
	transform: scale(1.3) rotate(-5deg);
}